Day-1 : Class, Methods and Function:
==================================
Class:
- all the class name should starts with capital letters.


Methods:
- writing a function inside a class called method.
- all the methods name of the methods should be small.


decleration, defination and calling
- decleration and defenation should be out of the main class.
- calling should be inside  a class.


Function:

Syntax: (function)
	function_type function_name( parameter ){
		// decleration, defenation
	}

Function types: except void remaining types return the data. 



Day-2 : static block and constructor
====================================

Constructor:
- Constructor are used to initilize the oobject. For every class there will be default Constructor. Whenever e create an object Counstructor will be called.
- Constructor having class name and method properties.


Static Block:
- It is created with static Keyword.
- It will call automitacally.

example:
class Demo{
	static{
		System.out.print("Static Block");
	}
	Demo(){
		System.out.print("Constructor");
	}
}
public class q2{
	public static void main()(String args[]){
		Demo d1 = new Demo();
		Demo d2 = new Demo();
	}
}


Static Method:
- For static method no need to call with object, directly call with Class name, here static will act as instance.


Conditional Statements:
- if else, else if laddere, switch case
- these are used to check the condition and print that relevent block in constant time.


Control Statements:
Entry Control : for loop, while loop

Syntax (for loop) : for(starts; end; difference){  }
       (while loop): start; while(end){ difference }

- when we know the range we use for loop, when we don't know the range we use while loop. 


Exit Control : do while loop

Jump Control : break, continue, return, throw, goto


Day-3 : Pattern Printing
========================

* Nested Loops *

- loops inside the loops.
- There are three type of Solutions for Any Problem.
	1.Brute Force
	2.Better
	3.Optimal Solutions

- For Brute Force Most of the Solutions can be Written using 2 loops.

- After This For Every Pattern Problems, we must Know 3 things
	1.How many rows will Print.
	2.How many columns are Needed.
	3.must Know what to print and what not to print.


Day-4 : Switch Case Statements
==============================

- cases have to be same type as expressions, must be constant or litral.
- duplicates cases are not allowed.
- break is used to terminate the sequence.
- if break is not used, it will continue to next case.
- default will execute when none of above does.
- if default is not at the end, put break after it.

Syntax: 
switch(expression){
	case :
		Statements;
		break;
	default:
		Statements;
}

# Ternary Operator:
	( condition ) ? Statement1 : Statement2;
	(n == 1) ? print("Yes) : print("No")


For-Each loop:
- In, collection we don't have index value, in those situation we have to use for-each loop.
Syntax:
	for( var: arr ){
		Statements;
	}

Day-5 : Arrays
===============

Array : it is a data structure which collect similar type of data in continous location.
- In, C and C++ we have poiters so, element will be stored in continous format, while in Java we have not pointers so it will might store in random memory location.

Syntax:
	datatype[] array_name;

Premitive : - They are can't be splitted oe divided.
			- int, float, char ...
Non-Premitive : - They can be divided.
				- String, objects(created by user)
				- class node{
					int data;
					node next;
				}

- all the objects will be stored in heap memory.
- all the references will be stored in stack memory.
- stack memory having less space compare to heap.
- instade of creating multiple variable create array.
- if we create multiple variable to get the data simply we can print the variable, when it comes to array if you want to print the data we can print using index value and default index value starts with 0.
- in, array decleration and initilization happened in same line," int[] arr = {1,2,3,4}"
- to get the length of the array we have a method called "array.length".
- to get the length of the string we have a method called "str.length()".

snake case: array_name
camel case : arrayName

- In, java it is prefer to use camel case to write production level codes.

# Types of Printng Formats:
-----------------------------
1. using simple for loop:
	for(int i =0; i<arr.length;i++){
		System.out.print(arr[i]);
	}

2. using for each loop:
	for(int i : arr){
		System.out.print(i + " ");
	}
	- here we don't need index value.

3. using Arrays.toString() method:
	System.out.print(Arrays.toString(arr));


Declaring size of array and initilization by user:
---------------------------------------------------

- array having fixed size, if we decler it can't be changes.
	int[] arr = new int[5];
- with the help of new keyword actual object is created into heap memory.
- whenever you assign or trying to get nth value of array it will throw Exception called "Array out of bond".


Day-6 : 2D Arrays
==================

- It consists of row and columns.
- Syntax:
	int[][] arr = new int[][];

- here row values are mandatory while columns can be anything.
- first [] represents row and another is for column.
- each row will act as an individual array.


Day-7 : ArrayList
===============================

- Array have fixed size, once we declare we can't change.
- to incres ssize dynamically we have to use ArrayList, it belongs to Collection Framework.
- Framework contains pre define methods and programs.

Syntax:
	List<Wrapper Class> arraylist_name = new ArrayList<>();

- here, List is an interface, it contains incomplement methods.
- Wrapper class is not a premitive datatype, it's a Class.
- in, Collection we have to use Wrapper Class only.
- <> it calls generics.
- ArrayList is a Class, which contains complete methods.
- as it is a class you have to import ArrayList Class, can access all the pre-define methods present in ArrayList.


ArrayList Dynamic Nature:
- when an element is trying to add, size get doubled.
- when an element is trying to delete, size get half.


Sub-Arrays:
------------
- an element of an array are also part of sub-arrays in continious manner.


Day-8 : Recursion
====================

- function calls itself till it's meet base condition called Recursion.
- there are two types of Recursion, i) function calling same function. ii) function calling another function.
- if we didn't wriite base condition properly we get Exception stackoverflow
- recursions are use to break the code.
- for every recursive call element get push into stack, after reaching base condition element will get pop.


passed by value and passed by reference.
----------------------------------------

- In java, we don't have pointers so we can't references.
