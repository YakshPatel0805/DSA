Day-1 : Class, Methods and Function:
==================================
Class:
- all the class name should starts with capital letters.


Methods:
- writing a function inside a class called method.
- all the methods name of the methods should be small.


decleration, defination and calling
- decleration and defenation should be out of the main class.
- calling should be inside  a class.


Function:

Syntax: (function)
	function_type function_name( parameter ){
		// decleration, defenation
	}

Function types: except void remaining types return the data. 



Day-2 : static block and constructor
====================================

Constructor:
- Constructor are used to initilize the oobject. For every class there will be default Constructor. Whenever e create an object Counstructor will be called.
- Constructor having class name and method properties.


Static Block:
- It is created with static Keyword.
- It will call automitacally.

example:
class Demo{
	static{
		System.out.print("Static Block");
	}
	Demo(){
		System.out.print("Constructor");
	}
}
public class q2{
	public static void main()(String args[]){
		Demo d1 = new Demo();
		Demo d2 = new Demo();
	}
}


Static Method:
- For static method no need to call with object, directly call with Class name, here static will act as instance.


Conditional Statements:
- if else, else if laddere, switch case
- these are used to check the condition and print that relevent block in constant time.


Control Statements:
Entry Control : for loop, while loop

Syntax (for loop) : for(starts; end; difference){  }
       (while loop): start; while(end){ difference }

- when we know the range we use for loop, when we don't know the range we use while loop. 


Exit Control : do while loop

Jump Control : break, continue, return, throw, goto


Day-3 : Pattern Printing
========================

* Nested Loops *

- loops inside the loops.
- There are three type of Solutions for Any Problem.
	1.Brute Force
	2.Better
	3.Optimal Solutions

- For Brute Force Most of the Solutions can be Written using 2 loops.

- After This For Every Pattern Problems, we must Know 3 things
	1.How many rows will Print.
	2.How many columns are Needed.
	3.must Know what to print and what not to print.


Day-4 : Switch Case Statements
==============================

- cases have to be same type as expressions, must be constant or litral.
- duplicates cases are not allowed.
- break is used to terminate the sequence.
- if break is not used, it will continue to next case.
- default will execute when none of above does.
- if default is not at the end, put break after it.

Syntax: 
switch(expression){
	case :
		Statements;
		break;
	default:
		Statements;
}

# Ternary Operator:
	( condition ) ? Statement1 : Statement2;
	(n == 1) ? print("Yes) : print("No")


For-Each loop:
- In, collection we don't have index value, in those situation we have to use for-each loop.
Syntax:
	for( var: arr ){
		Statements;
	}

Day-5 : Arrays
===============

Array : it is a data structure which collect similar type of data in continous location.
- In, C and C++ we have poiters so, element will be stored in continous format, while in Java we have not pointers so it will might store in random memory location.

Syntax:
	datatype[] array_name;

Premitive : - They are can't be splitted oe divided.
			- int, float, char ...
Non-Premitive : - They can be divided.
				- String, objects(created by user)
				- class node{
					int data;
					node next;
				}

- all the objects will be stored in heap memory.
- all the references will be stored in stack memory.
- stack memory having less space compare to heap.
- instade of creating multiple variable create array.
- if we create multiple variable to get the data simply we can print the variable, when it comes to array if you want to print the data we can print using index value and default index value starts with 0.
- in, array decleration and initilization happened in same line," int[] arr = {1,2,3,4}"
- to get the length of the array we have a method called "array.length", here ".length" is a field not method.
- to get the length of the string we have a method called "str.length()".

snake case: array_name
camel case : arrayName

- In, java it is prefer to use camel case to write production level codes.

# Types of Printng Formats:
-----------------------------
1. using simple for loop:
	for(int i =0; i<arr.length;i++){
		System.out.print(arr[i]);
	}

2. using for each loop:
	for(int i : arr){
		System.out.print(i + " ");
	}
	- here we don't need index value.

3. using Arrays.toString() method:
	System.out.print(Arrays.toString(arr));


Declaring size of array and initilization by user:
---------------------------------------------------

- array having fixed size, if we decler it can't be changes.
	int[] arr = new int[5];
- with the help of new keyword actual object is created into heap memory.
- whenever you assign or trying to get nth value of array it will throw Exception called "Array out of bond".


Day-6 : 2D Arrays
==================

- It consists of row and columns.
- Syntax:
	int[][] arr = new int[][];

- here row values are mandatory while columns can be anything.
- first [] represents row and another is for column.
- each row will act as an individual array.


Day-7 : ArrayList
===================

- Array have fixed size, once we declare we can't change.
- to incres ssize dynamically we have to use ArrayList, it belongs to Collection Framework.
- Framework contains pre define methods and programs.

Syntax:
	List<Wrapper Class> arraylist_name = new ArrayList<>();

- here, List is an interface, it contains incomplement methods.
- Wrapper class is not a premitive datatype, it's a Class.
- in, Collection we have to use Wrapper Class only.
- <> it calls generics.
- ArrayList is a Class, which contains complete methods.
- as it is a class you have to import ArrayList Class, can access all the pre-define methods present in ArrayList.


ArrayList Dynamic Nature:
- when an element is trying to add, size get doubled.
- when an element is trying to delete, size get half.


Sub-Arrays:
------------
- an element of an array are also part of sub-arrays in continious manner.


Day-8 : Recursion
====================

- function calls itself till it's meet base condition called Recursion.
- there are two types of Recursion, i. function calling same function. 
									ii. function calling another function.
- if we didn't wriite base condition properly we get Exception stackoverflow
- recursions are use to break the code.
- for every recursive call element get push into stack, after reaching base condition element will get pop.


passed by value and passed by reference.
----------------------------------------

- In java, we don't have pointers so we can't pass references.


Day-9 : Recursion (String)
==========================

Q1: from a given string we have to a character using recursion.
	- assume that we starting from two strings, initially output string is empty.
	- we have few steps;
		- take first character from a string and store in char variable.
		- check the variable with our targeted character, if it matches return output string else, append the character to the output string.
		- slice the string by one character (using substring method).
		- make a recursive call where, base condition is input string become empty.

Q2: from a given string skip a word, print rest of character.
	- using startsWith() methods.


Two Pointers approach:
-----------------------

- initilization of pointers
- if you star first pointer at 0 and second pointer at lasst index, whenever both pointer cross each other break the loop, in between do relevent operations.

Q. reverse an array using two pointers.
	- first, initilize two pointers at 0 index and last index.
	- swap both values.
	- increment i pointer and decrement j pointer.
	- when both pointer cross eeach there break the loop.


Day-10 : Strings
=================

- Strings are classes.
- Arrays are objects.
- the  sequence of character calles Strings.
- String are immutable.
- all the array objects will be created in heap memory but  Strings are created inside heap memory in Pool.
- Once, a string got created, are fixed.

example: String a = "Hello";
		String b = "Hello";
		System.out.print(a == b);
		- here both variable point at same memory location, so it gives output "true".

		String a = new String("Hello");
		String b = new String("Hello");
		System.out.print(a == b);
		- here for both variable two different objects are created which point at different memory location, so it gives output "false".

- in, strings "equals()" method is used to compare data and "==" is used to compare address.


Subset
-------

- for a given array we have to possible arrays it should be in a sequence but not continious.
- in an array if we have n numbers of element we get 2^n subset.


Backtracking
--------------

- In recursion, we have two possibility either if or else.
- In Backtracking, we have multiple possibility.
- most of the problems, whenever we reach base case we have to print all basecase elements and remove last element in every recursive call.


Day-11 : Duch National Flag Algorithm.
=======================================

- initialize three pointers, l at 0 index,m at 0 index and h at arr.length-1 position.
- the elements between m, h should be sorted.
- if arr[m] == 0, swap values of m, l and increase m, l.
- if arr[m] == 2, swap values of m, h and decrease h, increase l.
- if arr[m] == 1, increase m.


Collection Framework :
----------------------

    List     |       set       |      map
--------------------------------------------------
- ArrayList  | - HashSet       | - HashMap
- LinkedList | - LinkedHashSet | - LinkedHashMap
- Vector     | - TreeSet       | - TreeMap

- List, Set and Map are interfaces, rest of the all are classes.
- Interface Contains incomplement Methods.
- List is Ordered which allows duplicates.
- Set is unordered which won't accepts duplicates.
- Maps contains key-value pairs.


Syntax:	Set<Integer> values = new HashSet<>();


Day-12 : Greedy Algorithm.
============================

Greedy Algorithm:
- n metting in room (Code)

		import java.util.*;
		public class MeetingScheduler {
			public static int maxMeetings(int[] start, int[] end) {
				int n = start.length;
				int[][] meetings = new int[n][2];
				
				for (int i = 0; i < n; i++) {
					meetings[i][0] = start[i];
					meetings[i][1] = end[i];
				}
				Arrays.sort(meetings, Comparator.comparingInt(a -> a[1]));
				int count = 1;
				int lastEndTime = meetings[0][1];
				
				for (int i = 1; i < n; i++) {
					if (meetings[i][0] > lastEndTime) {
						count++;
						lastEndTime = meetings[i][1];
					}
				}
				return count;
			}

			public static void main(String[] args) {
				int[] start = {1, 3, 0, 5, 8, 5};
				int[] end = {2, 4, 6, 7, 9, 9};
				System.out.println(maxMeetings(start, end));
			}
		}


- job scheduling.
- 0/1 fraction knapstack problem.


Day-15 : Linear Search & Binary Search
========================================

Linear Search:
	- time complexity is O(n)

	example:
		class Day15{
			public static void main(String[] args) {
				int target = 14;
				int[] arr = {5,8,11,14,17};

				for(int i = 0; i < arr.length; i++){
					if(arr[i] == target){
						System.out.println("Found at index: " + i);
						break;
					}
				}
			}
		}


Binary Search:
	- time complexity is O(log(n))
	- array always be sorted.
	- reduce time complexity while searching.

	Steps:
		- find mid value of the array.
		- if mid equals to target return mid.
		- if mid value is less then target, search in right portion of the array, initilize left to mid + 1.
		- if mid value is greater then target, search in left portion of array, initilizae right to mid - 1.
		- continue the loop till left and right pointer crosses each other.

	Roteted Sorted Array.
	Steps:
		- initialize l,r at 0, n-1.
		- run a loop from l to r.
		- we have to find which half is sorted, if a[mid] < a[l], means right half is sorted.
		- if target lies in between a[l] and a[mid], means element present in left half so, left pointer remains same and right pointer comes to mid - 1.
		- else, element present in right half, right pointer remains same and left comes to mid + 1.
		- if a[mid] is greater to a[l], left half is sorted and if target lies in between a[mid] and a[r]  means in right half so right pointer remains same and left comes to mid + 1.
		- else, element present in left half, left pointer remains same and right comes to mid - 1.



Maximum product of sub array elements:
---------------------------------------

example:
	arr = [2,3,-6,4]
	- start product variable with 1.
	- in the sub array, if we have even positive number product will be positive.
	- if we have odd negative numbers product will be negative.
	- in the sub array if we have at least "0", start product variable with 1.
	- if we have negative value, product of prefix and sufix element will be positive.
	- initialize maximum variable to extreme negative.



88, 4, 56, 15, 229, 857, 1358, 424, 162, 1011 = leetcode
--------------------------------------------------------

leetcode problem - koko eating bananas

- whatever max element in array, check for that.
- initilize left pointer to 0, right to max.
- get the middle value, divide all array elements, if sum of all all ceil values less then or equal to target, eliminate right half.
- change the right pointer to mid - 1.
- else, change left pointer to mid + 1 by eliminate left half.
- return value of left.


OOPS (Object Oriented Programming):
====================================

4 pillers of OOPS:
	- inheritance
	- abstraction
	- encapesulation
	- polymorphism

- to achieve these property you need class, object, constructor, interface.

Class: class is an virtual entity and blue print for object.
Object: instance of a class
		we can call methods which present in that particular class by creating object for that class.
Constructor: initialize an object
			- Default Constructor.
				it is for every class.

			- Parameterized Constructor.
				it contains some parameter.


Inheritance:
-------------
	- we use extend keyword for inheritance.
	- using implement keyword we can inheritate properties from interfaces.


	single inheritance:
		- the property are inheritade by child class from parent class.

	multiple inheritance:
		- property are inheritade from multiple parent classes.

	multilevel inheritance:
		- property are inheritade to parent class from grandparent class and the property are inheritade to child class from parent class.

	hyrarchi inheritance:
		- properties are inheritade to multiple child classes.


Polymorphism:
--------------
	- same method appearing multiple times.
	- main method can be overridden with different parameters.

	- method Overloading:
		- in a same class if we have multiple methods with same name, different parameter.

	- method Overriding:
		- in child class if we declare a method which present in parent class.
		- with same method name and same parameter.


Encapesulation:
----------------
	- binding method and data , hiding sensetive data 
	- if variable are private we can't access outside the class, if want to access use methods.


Abstraction:
-------------
	- hiding implementation, showing essential details.
	- if you to make method abstract use "abstract" keyword.
	- if we have abstract method we have to make the class abstract.
	- they are incomplete methods.

	- Data abstraction
	- Function abstraction
	- Procedual abstraction
	- Control abstraction


Interface:
-----------
	- it contains all abstract methods.
	- we can't create object for interface